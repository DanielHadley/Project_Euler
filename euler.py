# Euler1
# If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
# Find the sum of all the multiples of 3 or 5 below 1000.
# My solution uses list slicing and a lambda function
my_list = range(1000)
answer = sum (filter(lambda x: x % 3 == 0 or x % 5 == 0, my_list))
print answer


# Euler2
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


fib = [1, 2]
while fib[-1] < 4000000:
	fib.append(fib[-1] + fib[-2])

answer = sum(filter(lambda x: x % 2 == 0, fib))
print(answer)


#Euler3
# The prime factors of 13195 are 5, 7, 13 and 29.
# What is the largest prime factor of the number 600851475143 ?
n = 600851475143 

def primes(n):
    primfac = []
    d = 2
    while d*d <= n:
        while (n % d) == 0:
            primfac.append(d)  
            n = n / d
        d = d + 1
    if n > 1:
       primfac.append(n)
    return primfac

print max(primes(n))


# Euler4
# A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
# Find the largest palindrome made from the product of two 3-digit numbers.
n = 999 * 999 # The largest theoretical possibility 

def palindrome(n):
    palindromes = []
    while n >= 0:
        AsList = [int(i) for i in str(n)]
        FirstHalf = AsList[:len(AsList)/2]
        SecondHalf = AsList[len(AsList)/2:]
        Rejoined = int(''.join(map(str,AsList)))
        if FirstHalf == SecondHalf[::-1]:
            palindromes.append(Rejoined)
        n -= 1
    return palindromes


def three_dig_test(n):
    LargestFactor = 999
    SecondFactor = n / LargestFactor
    while n % LargestFactor != 0:
        LargestFactor -= 1
        SecondFactor = n / LargestFactor
    if len(str(LargestFactor)) == 3 and len(str(SecondFactor)) == 3:
        return True 
    else:
        return False

# Not exaclty optimized for speed, but...
final = []
for i in palindrome(n):
    if three_dig_test(i) == True:
        final.append(i)
print max(final)


# Euler5
# 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
# What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
# Takes a minute, but...

def allTest(x):
    numbers = list(range(1,21))
    Falses = 0
    for n in numbers:
        if x % n != 0:
            Falses += 1
    if Falses > 0:
        return False
    else:
        return True

def smallestMultiple(x):
    while allTest(x) == False:
        x+=10
    return x

print smallestMultiple(2520)